import pygame
import chess
import os
from piece import Piece

# --- Configuration Constants (MUST be defined here) ---
BOARD_SIZE = 8
SCREEN_WIDTH = 640
SCREEN_HEIGHT = 640
SQUARE_SIZE = SCREEN_WIDTH // BOARD_SIZE # Size of each square in pixels

LIGHT_SQUARE_COLOR = (240, 217, 181)
DARK_SQUARE_COLOR = (181, 136, 99)

# --- Asset Paths (MUST be defined here) ---
ASSETS_DIR = "assets" # Folder where piece images are stored

class ChessBoard:
    """
    Manages the chess board state using the python-chess library.
    Handles drawing the board and pieces using Pygame, leveraging the
    custom Piece class's symbolic representation for image loading.
    """
    def __init__(self):
        """
        Initializes the chess board and loads piece images based on Piece class symbols.
        """
        self.board = chess.Board() # The core chess board object from python-chess
        self.piece_images = {} # Dictionary to store loaded Pygame image surfaces
        pygame.font.init() # Initialize font module for text placeholders
        self._load_piece_images()

    def _load_piece_images(self):
        """
        Loads all chess piece images from the 'assets' directory.
        Images are named according to the symbol generated by the custom Piece class
        (e.g., 'wP.png', 'bK.png').
        """
        # Create a list of all possible piece configurations using your Piece class
        all_piece_configs = []
        for color_val in [chess.WHITE, chess.BLACK]:
            for piece_type_val in [chess.PAWN, chess.ROOK, chess.KNIGHT,
                                   chess.BISHOP, chess.QUEEN, chess.KING]:
                # Instantiate your custom Piece object to get its symbol
                custom_piece = Piece(color_val, piece_type_val)
                all_piece_configs.append((color_val, piece_type_val, custom_piece.symbol))
        
        for color, piece_type, symbol in all_piece_configs:
            image_path = os.path.join(ASSETS_DIR, f"{symbol}.png")
            try:
                # Load image and convert for faster blitting
                image = pygame.image.load(image_path).convert_alpha()
                # Scale image to fit the square size
                self.piece_images[(color, piece_type)] = pygame.transform.scale(image, (SQUARE_SIZE, SQUARE_SIZE))
            except pygame.error as e:
                print(f"Warning: Could not load image {image_path}. Error: {e}")
                # Fallback: Load a placeholder image or draw text
                self.piece_images[(color, piece_type)] = self._create_text_placeholder(symbol)


    def _create_text_placeholder(self, text):
        """
        Creates a simple text surface as a placeholder if an image fails to load.
        """
        # Ensure font module is initialized
        if not pygame.font.get_init():
            pygame.font.init()

        font = pygame.font.Font(None, 36) # Default font, size 36
        text_surface = font.render(text, True, (255, 0, 0)) # Red text
        
        # Create a blank surface to put the text on, centered
        placeholder_surface = pygame.Surface((SQUARE_SIZE, SQUARE_SIZE), pygame.SRCALPHA)
        text_rect = text_surface.get_rect(center=(SQUARE_SIZE // 2, SQUARE_SIZE // 2))
        placeholder_surface.blit(text_surface, text_rect)
        return placeholder_surface


    def display_text(self):
        """
        Prints the current state of the chess board to the console.
        """
        print("\n" + str(self.board) + "\n")

    def draw_board(self, screen):
        """
        Draws the chessboard squares and the pieces using Pygame.
        """
        for row in range(BOARD_SIZE):
            for col in range(BOARD_SIZE):
                # Draw square
                color = LIGHT_SQUARE_COLOR if (row + col) % 2 == 0 else DARK_SQUARE_COLOR
                pygame.draw.rect(screen, color,
                                 (col * SQUARE_SIZE, row * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE))

                # Draw piece if present
                # Convert (row, col) to chess.Square (e.g., (0,0) -> A8, (7,7) -> H1)
                square_index = chess.square(col, 7 - row) # Our row 0 is rank 8, col 0 is file A
                piece_on_board = self.board.piece_at(square_index) # This is a python-chess Piece object

                if piece_on_board and (piece_on_board.color, piece_on_board.piece_type) in self.piece_images:
                    # Get the loaded image surface using python-chess piece attributes as keys
                    piece_img = self.piece_images[(piece_on_board.color, piece_on_board.piece_type)]
                    # Blit (draw) the image onto the screen at the correct position
                    screen.blit(piece_img, (col * SQUARE_SIZE, row * SQUARE_SIZE))

    def move_piece(self, move_uci):
        """
        Attempts to make a move on the board using its UCI string.
        """
        try:
            self.board.push_uci(move_uci)
            return True
        except ValueError as e:
            print(f"Illegal move: {e}")
            return False

    # Standby methods for JSON serialization (not changed)
    def save_game_state(self, filename="chess_game.json"):
        import json
        game_state = {
            "fen": self.board.fen(),
            "turn": self.board.turn == chess.WHITE
        }
        with open(filename, 'w') as f:
            json.dump(game_state, f, indent=4)
        print(f"Game saved to {filename}")

    def load_game_state(self, filename="chess_game.json"):
        import json
        try:
            with open(filename, 'r') as f:
                game_state = json.load(f)
            self.board = chess.Board(game_state["fen"])
            self.board.turn = chess.WHITE if game_state["turn"] else chess.BLACK
            print(f"Game loaded from {filename}")
            return True
        except FileNotFoundError:
            print(f"Error: Save file '{filename}' not found.")
            return False
        except Exception as e:
            print(f"Error loading game: {e}")
            return False